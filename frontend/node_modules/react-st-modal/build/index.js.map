{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/UI/Button/Button.tsx","../src/components/FocusLock/FocusLock.tsx","../src/utils/helpers.ts","../src/components/Modal/Modal.tsx","../src/components/Modal/Confirm.tsx","../src/components/Modal/Alert.tsx","../src/context/DialogContextProvider.tsx","../src/components/Modal/Dialog.tsx","../src/components/Modal/Prompt.tsx","../src/components/Interaction/Interaction.tsx","../src/components/UI/Content/Content.tsx","../src/components/UI/Footer/Footer.tsx","../src/components/Static/StaticDialog.tsx","../src/hooks/useDialog.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { MutableRefObject, ReactNode, forwardRef } from 'react';\n\nimport styles from './Button.module.scss';\n\nexport const enum ButtonState {\n    ACTIVE = 'active',\n    DISABLED = 'disabled',\n    PENDING = 'pending',\n}\n\nexport const enum ButtonType {\n    PRIMARY = 'primary',\n    DANGER = 'danger',\n    LIGHT = 'light',\n    DARK = 'dark',\n}\n\ntype ButtonProps = {\n    children: ReactNode;\n    state?: ButtonState | string;\n    type?: ButtonType | string;\n    className?: string;\n    formRole?: 'button' | 'submit';\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    autoFocus?: boolean;\n};\n\nfunction LoadingIcon(): JSX.Element {\n    return (\n        <svg viewBox=\"0 0 512 512\" width=\"20\" height=\"20\" fill=\"#ffffff\" fillRule=\"nonzero\">\n            <g>\n                <path d=\"M102.59,341.42a15,15,0,0,1-13.42-8.28,187.41,187.41,0,0,1,35.11-216.86c73.18-73.19,192.26-73.19,265.44,0a15,15,0,0,1-21.21,21.21C307,76,207,76,145.49,137.49A157.45,157.45,0,0,0,116,319.69a15,15,0,0,1-13.4,21.73Z\" />\n                <path d=\"M257,436.61a187.1,187.1,0,0,1-132.72-54.88,15,15,0,1,1,21.21-21.22C207,422,307,422,368.51,360.51A157.45,157.45,0,0,0,398,178.31a15,15,0,0,1,26.82-13.45A187.62,187.62,0,0,1,257,436.61Z\" />\n                <path d=\"M315.21,148.25a15,15,0,0,1-1.47-29.92l47.43-4.73-9.51-47.67a15,15,0,0,1,29.42-5.86L393.82,124a15,15,0,0,1-13.22,17.86l-63.88,6.37C316.21,148.23,315.71,148.25,315.21,148.25Z\" />\n                <path d=\"M147.61,450a15,15,0,0,1-14.7-12.07l-12.74-63.88a15,15,0,0,1,13.23-17.86l63.88-6.37a15,15,0,0,1,3,29.85l-47.43,4.73,9.5,47.67A15,15,0,0,1,147.61,450Z\" />\n            </g>\n        </svg>\n    );\n}\n\nconst Button = forwardRef((props: ButtonProps, ref: MutableRefObject<HTMLButtonElement>) => {\n    return (\n        <button\n            ref={ref}\n            autoFocus={props.autoFocus}\n            onClick={props.onClick}\n            type={props.formRole || 'button'}\n            disabled={props.state === ButtonState.DISABLED || props.state === ButtonState.PENDING}\n            className={[\n                props.className ?? '',\n                styles[props.type ? `--${props.type}` : '--primary'],\n                props.state === ButtonState.PENDING ? styles.buttonPending : '',\n            ].join(' ')}\n        >\n            {props.state === ButtonState.PENDING && <LoadingIcon />}\n            {props.children}\n        </button>\n    );\n});\n\nButton.displayName = 'Button';\n\nexport default Button;\n","import React, { useEffect, useRef } from 'react';\n\ntype FocusLockProps = {\n    isLocked?: boolean;\n    isOpen: boolean;\n    children?: React.ReactNode;\n};\n\nexport default function FocusLock(props: FocusLockProps): JSX.Element {\n    const rootNode = useRef<HTMLDivElement>();\n    const focusableItems = useRef<NodeListOf<HTMLElement>>();\n\n    const isLocked = props.isLocked ?? true;\n\n    useEffect(() => {\n        const updateFocusableItems = () => {\n            focusableItems.current = rootNode.current?.querySelectorAll(\n                'input, select, textarea, button, [href], [tabindex]:not([tabindex=\"-1\"]), video'\n            );\n        };\n\n        const observer = new MutationObserver(() => {\n            updateFocusableItems();\n        });\n\n        updateFocusableItems();\n        observer.observe(rootNode.current, { childList: true });\n\n        return () => {\n            observer.disconnect();\n        };\n    }, [rootNode]);\n\n    useEffect(() => {\n        if (props.isOpen) {\n            const focused = rootNode.current?.querySelectorAll(\n                'input:focus, button:focus, [href]:focus, select:focus, textarea:focus, [tabindex]:not([tabindex=\"-1\"]):focus, video:focus'\n            );\n\n            if (focused.length === 0 && focusableItems.current.length > 0) {\n                let firstFocusItem: HTMLElement = null;\n                const closedButtonEl = rootNode.current?.querySelector('.stf__dialogClose');\n\n                focusableItems.current.forEach((item) => {\n                    if (item !== closedButtonEl && firstFocusItem === null) {\n                        firstFocusItem = item;\n                    }\n                });\n\n                if (firstFocusItem === null) {\n                    firstFocusItem = closedButtonEl as HTMLElement;\n                }\n\n                firstFocusItem.focus();\n            }\n        }\n    }, [props.isOpen]);\n\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (!focusableItems.current || focusableItems.current.length === 0) {\n                return;\n            }\n\n            const { key, shiftKey } = event;\n            const { length, 0: firstItem, [length - 1]: lastItem } = focusableItems.current;\n\n            if (isLocked && key === 'Tab') {\n                // If only one item then prevent tabbing when locked\n                if (length === 1) {\n                    event.preventDefault();\n                    return;\n                }\n\n                // If focused on last item then focus on first item when tab is pressed\n                if (!shiftKey && document.activeElement === lastItem) {\n                    event.preventDefault();\n                    firstItem.focus();\n                    return;\n                }\n\n                // If focused on first item then focus on last item when shift + tab is pressed\n                if (shiftKey && document.activeElement === firstItem) {\n                    event.preventDefault();\n                    lastItem.focus();\n                    return;\n                }\n            }\n        };\n\n        if (props.isOpen) {\n            window.addEventListener('keydown', handleKeyPress);\n\n            return () => {\n                window.removeEventListener('keydown', handleKeyPress);\n            };\n        }\n    }, [isLocked, focusableItems, props.isOpen]);\n\n    return <div ref={rootNode}>{props.children}</div>;\n}\n","export function appendToBody(id: string): HTMLElement {\n    let result = document.getElementById(id);\n\n    if (!result) {\n        result = document.createElement('div');\n        result.setAttribute('id', id);\n        document.body.appendChild(result);\n    }\n\n    return result;\n}\n\nexport function getScrollbarWidth(): number {\n    return window.innerWidth - document.documentElement.clientWidth;\n}\n","import '../../vars.scss';\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport FocusLock from '../FocusLock/FocusLock';\nimport { getScrollbarWidth } from '../../utils/helpers';\nimport styles from './Modal.module.scss';\n\ninterface ModalProps {\n    isOpen?: boolean;\n    isStatic?: boolean;\n    isFocusLock?: boolean;\n    className?: string;\n    children?: React.ReactNode;\n    labelledby?: string;\n    describedby?: string;\n\n    defaultBodyOverflow?: string;\n    isBodyScrollLocked?: boolean;\n    replaceScrollBar?: boolean;\n    scrollBarPlaceholderColor?: string;\n\n    onCompletelyHidden?: () => void;\n    onCompletelyVisible?: () => void;\n    onAttemptClose?: () => void;\n}\n\nexport default function Modal(props: ModalProps): JSX.Element {\n    const isBodyScrollLocked = props.isBodyScrollLocked ?? true;\n\n    const [isOpen, setOpen] = useState<boolean>(false);\n    const [isCompletelyClose, setCompletelyClose] = useState<boolean>(true);\n\n    const isOpenRef = useRef(isOpen);\n    const isOverlayClick = useRef(false);\n\n    const overlayElement = useRef<HTMLDivElement>();\n\n    const handleEsc = useCallback(\n        (event: KeyboardEvent) => {\n            if (\n                props.isOpen &&\n                props.onAttemptClose &&\n                (event.key === 'Esc' || event.key === 'Escape')\n            ) {\n                props.onAttemptClose();\n            }\n        },\n        [props]\n    );\n\n    useEffect(() => {\n        setOpen(props.isOpen);\n        isOpenRef.current = props.isOpen;\n\n        if (isBodyScrollLocked) {\n            const replaceScrollBar = props.replaceScrollBar ?? true;\n\n            if (replaceScrollBar) {\n                document.body.style.borderRight = props.isOpen\n                    ? `solid ${getScrollbarWidth()}px ${\n                          props.scrollBarPlaceholderColor ?? '#eeeeee'\n                      }`\n                    : 'none';\n            }\n\n            document.body.style.overflow = props.isOpen\n                ? 'hidden'\n                : props.defaultBodyOverflow || 'visible';\n        }\n    }, [\n        props.isOpen,\n        props.defaultBodyOverflow,\n        props.scrollBarPlaceholderColor,\n        props.replaceScrollBar,\n        isBodyScrollLocked,\n    ]);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleEsc);\n\n        return () => {\n            window.removeEventListener('keydown', handleEsc);\n        };\n    }, [handleEsc]);\n\n    return (\n        <FocusLock isLocked={props.isFocusLock} isOpen={isOpen}>\n            <div\n                ref={overlayElement}\n                className={[\n                    styles.overlay,\n                    !isOpen ? styles.overlayHidden : '',\n                    isCompletelyClose && !isOpen && props.isStatic ? styles.staticDialog : '',\n                ].join(' ')}\n                onMouseDown={(e) => {\n                    if (e.target === overlayElement.current) {\n                        isOverlayClick.current = true;\n                    }\n                }}\n                onMouseUp={(e) => {\n                    if (e.target === overlayElement.current && isOverlayClick.current === true) {\n                        isOverlayClick.current = false;\n                        props.onAttemptClose();\n                    }\n                }}\n            >\n                <div\n                    role=\"dialog\"\n                    aria-modal=\"true\"\n                    aria-labelledby={props.labelledby || ''}\n                    aria-describedby={props.describedby || ''}\n                    onTransitionEnd={() => {\n                        if (isOpenRef.current && props.onCompletelyVisible) {\n                            props.onCompletelyVisible();\n                        }\n                        if (!isOpenRef.current && props.onCompletelyHidden) {\n                            props.onCompletelyHidden();\n                        }\n                        if (props.isStatic) {\n                            setCompletelyClose(!isOpenRef.current);\n                        }\n                    }}\n                    className={[\n                        styles.modal,\n                        props.className || '',\n                        !isOpen ? styles.modalHidden : '',\n                    ].join(' ')}\n                >\n                    {props.children}\n                </div>\n            </div>\n        </FocusLock>\n    );\n}\n","import Button, { ButtonType } from '../UI/Button/Button';\nimport React, { useState } from 'react';\n\nimport { BaseDialogProps } from '../../utils/types';\nimport Modal from './Modal';\nimport styles from './Modal.module.scss';\n\ninterface ConfirmDialogProps extends BaseDialogProps<string> {\n    okButtonText?: string;\n    cancelButtonText?: string;\n    body?: string | JSX.Element;\n}\n\nexport const enum ConfirmDialogResult {\n    OK = 'ok',\n    CANCEL = 'cancel',\n}\n\nexport function ConfirmDialog(props: ConfirmDialogProps): JSX.Element {\n    const [isOpen, setOpen] = useState(true);\n    const dialogUniqId = (~~(Math.random() * 1e8)).toString(16);\n\n    const close = (result: string) => {\n        setOpen(false);\n\n        if (props.onClose) {\n            props.onClose(result);\n        }\n    };\n\n    return (\n        <Modal\n            className={styles.alert}\n            isOpen={isOpen}\n            labelledby={`header_${dialogUniqId}`}\n            describedby={`content_${dialogUniqId}`}\n            onAttemptClose={() => close(ConfirmDialogResult.CANCEL)}\n            onCompletelyHidden={() => {\n                if (props.onCompletelyHidden) {\n                    props.onCompletelyHidden();\n                }\n            }}\n        >\n            {props.title && (\n                <div className={styles.modalTitle} id={`header_${dialogUniqId}`}>\n                    {props.title}\n                </div>\n            )}\n            <div className={styles.modalContent} id={`content_${dialogUniqId}`}>\n                {props.body}\n            </div>\n            <div className={styles.modalButtonPlace}>\n                <Button\n                    onClick={() => {\n                        close(ConfirmDialogResult.OK);\n                    }}\n                >\n                    {props.okButtonText || 'Ok'}\n                </Button>\n                <Button\n                    onClick={() => {\n                        close(ConfirmDialogResult.CANCEL);\n                    }}\n                    autoFocus={true}\n                    type={ButtonType.LIGHT}\n                >\n                    {props.cancelButtonText || 'Cancel'}\n                </Button>\n            </div>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\n\nimport { BaseDialogProps } from '../../utils/types';\nimport Button from '../UI/Button/Button';\nimport Modal from './Modal';\nimport styles from './Modal.module.scss';\n\ninterface AlertDialogProps extends BaseDialogProps<void> {\n    buttonText?: string;\n    body?: string | JSX.Element;\n}\n\nexport function AlertDialog(props: AlertDialogProps): JSX.Element | null {\n    const [isOpen, setOpen] = useState(true);\n    const dialogUniqId = (~~(Math.random() * 1e8)).toString(16);\n\n    const close = () => {\n        setOpen(false);\n\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    return (\n        <Modal\n            className={styles.alert}\n            isOpen={isOpen}\n            labelledby={`header_${dialogUniqId}`}\n            describedby={`content_${dialogUniqId}`}\n            onAttemptClose={close}\n            onCompletelyHidden={() => {\n                if (props.onCompletelyHidden) {\n                    props.onCompletelyHidden();\n                }\n            }}\n        >\n            {props.title && (\n                <h3 className={styles.modalTitle} id={`header_${dialogUniqId}`}>\n                    {props.title}\n                </h3>\n            )}\n            <div className={styles.modalContent} id={`content_${dialogUniqId}`}>\n                {props.body}\n            </div>\n            <div className={styles.modalButtonPlace}>\n                <Button onClick={close} autoFocus={true}>\n                    {props.buttonText || 'Ok'}\n                </Button>\n            </div>\n        </Modal>\n    );\n}\n","import React, { ReactNode, useState } from 'react';\n\nexport interface DialogState {\n    result?: unknown;\n    isOpen: boolean;\n    isForce: boolean;\n}\n\nexport interface DialogContextType {\n    dialogState: DialogState;\n    setDialogState: React.Dispatch<React.SetStateAction<DialogState>>;\n}\n\nexport const DialogContext = React.createContext<DialogContextType>({\n    dialogState: {\n        result: undefined,\n        isOpen: false,\n        isForce: false,\n    },\n    setDialogState: () => null,\n});\n\ninterface DialogContextProviderProps {\n    children: ReactNode;\n}\n\nexport const DialogContextProvider = (props: DialogContextProviderProps): JSX.Element => {\n    const [dialogState, setDialogState] = useState<DialogState>({\n        result: undefined,\n        isOpen: false,\n        isForce: false,\n    });\n\n    return (\n        <DialogContext.Provider value={{ dialogState, setDialogState }}>\n            {props.children}\n        </DialogContext.Provider>\n    );\n};\n\nexport default DialogContextProvider;\n","import { DialogContext, DialogContextType } from '../../context/DialogContextProvider';\nimport React, { useContext, useEffect } from 'react';\n\nimport { BaseDialogProps } from '../../utils/types';\nimport Modal from './Modal';\nimport styles from './Modal.module.scss';\n\nexport interface DialogProps<T> extends BaseDialogProps<T> {\n    children?: React.ReactNode;\n    showCloseIcon?: boolean;\n    className?: string;\n    onAfterClose?: (result?: T) => void;\n    onAfterOpen?: () => void;\n    isCanClose?: boolean;\n    isOpen?: boolean;\n    isStatic?: boolean;\n    isFocusLock?: boolean;\n\n    defaultBodyOverflow?: string;\n    isBodyScrollLocked?: boolean;\n    replaceScrollBar?: boolean;\n    scrollBarPlaceholderColor?: string;\n}\n\nexport default function Dialog<T>(props: DialogProps<T>): JSX.Element {\n    const onClose = props.onClose;\n    const onAfterClose = props.onAfterClose;\n\n    const dialogUniqId = (~~(Math.random() * 1e8)).toString(16);\n\n    const isCanClose = props.isCanClose ?? true;\n\n    const { dialogState, setDialogState } = useContext<DialogContextType>(DialogContext);\n\n    useEffect(() => {\n        setDialogState({\n            isOpen: props.isOpen,\n            isForce: false,\n        });\n    }, [props.isOpen, setDialogState]);\n\n    const close = () => {\n        setDialogState({ isOpen: false, result: undefined, isForce: true });\n    };\n\n    useEffect(() => {\n        if (!dialogState.isOpen && dialogState.isForce) {\n            if (onClose) {\n                onClose(dialogState.result as T);\n            }\n            if (onAfterClose) {\n                onAfterClose(dialogState.result as T);\n            }\n        }\n        if (dialogState.isOpen && props.onAfterOpen) {\n            props.onAfterOpen();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogState]);\n\n    const onAttemptClose = () => {\n        if (isCanClose) {\n            onAfterClose ? onAfterClose(dialogState.result as T) : close();\n        }\n    };\n\n    return (\n        <Modal\n            className={[styles.dialog, props.className].join(' ')}\n            labelledby={`header_${dialogUniqId}`}\n            describedby={`content_${dialogUniqId}`}\n            isOpen={dialogState.isOpen}\n            isStatic={props.isStatic}\n            isFocusLock={props.isFocusLock}\n            defaultBodyOverflow={props.defaultBodyOverflow}\n            isBodyScrollLocked={props.isBodyScrollLocked}\n            replaceScrollBar={props.replaceScrollBar}\n            scrollBarPlaceholderColor={props.scrollBarPlaceholderColor}\n            onAttemptClose={onAttemptClose}\n            onCompletelyHidden={() => {\n                if (props.onCompletelyHidden) {\n                    props.onCompletelyHidden();\n                }\n            }}\n        >\n            {props.showCloseIcon && (\n                <button\n                    className={['stf__dialogClose', styles.modalCloseIcon].join(' ')}\n                    aria-label=\"Close\"\n                    onClick={() => {\n                        onAfterClose ? onAfterClose(dialogState.result as T) : close();\n                    }}\n                >\n                    <CloseIcon />\n                </button>\n            )}\n            {props.title && (\n                <h3 className={styles.modalTitle} id={`header_${dialogUniqId}`}>\n                    {props.title}\n                </h3>\n            )}\n            <div id={`content_${dialogUniqId}`} className={styles.modalBody}>\n                {props.children}\n            </div>\n        </Modal>\n    );\n}\n\nfunction CloseIcon() {\n    return (\n        <svg height=\"512px\" viewBox=\"0 0 512 512\" width=\"512px\">\n            <path\n                d={\n                    'M437.5,386.6L306.9,256l130.6-130.6c14.1-14.1,14.1-36.8,0-50.9c-14.1-14.1-36.8-14.1-50.9,0L256,205.1L125.4,74.5  ' +\n                    'c-14.1-14.1-36.8-14.1-50.9,0c-14.1,14.1-14.1,36.8,0,50.9L205.1,256L74.5,386.6c-14.1,14.1-14.1,36.8,0,50.9' +\n                    'c14.1,14.1,36.8,14.1,50.9,0L256,306.9l130.6,130.6c14.1,14.1,36.8,14.1,50.9,0C451.5,423.4,451.5,400.6,437.5,386.6z'\n                }\n            />\n        </svg>\n    );\n}\n","import Button, { ButtonType } from '../UI/Button/Button';\nimport React, { useEffect, useState } from 'react';\n\nimport { BaseDialogProps } from '../../utils/types';\nimport Modal from './Modal';\nimport styles from './Modal.module.scss';\n\ninterface PromptDialogProps extends BaseDialogProps<string> {\n    defaultValue?: string;\n    okButtonText?: string;\n    isRequired?: boolean;\n    cancelButtonText?: string;\n    errorText?: string;\n}\n\nexport function PromptDialog(props: PromptDialogProps): JSX.Element | null {\n    const [isOpen, setOpen] = useState(true);\n    const [isError, setError] = useState<boolean>(false);\n    const dialogUniqId = (~~(Math.random() * 1e8)).toString(16);\n\n    const defaultValue = props.defaultValue !== undefined ? String(props.defaultValue) : undefined;\n    const [value, setValue] = useState<string>(defaultValue);\n\n    const close = (result: string | undefined) => {\n        setOpen(false);\n\n        if (props.onClose) {\n            props.onClose(result);\n        }\n    };\n\n    useEffect(() => {\n        if (props.isRequired && value !== undefined) {\n            value.trim() === '' ? setError(true) : setError(false);\n        }\n    }, [value, props]);\n\n    return (\n        <Modal\n            className={styles.alert}\n            isOpen={isOpen}\n            labelledby={`header_${dialogUniqId}`}\n            describedby={`content_${dialogUniqId}`}\n            onAttemptClose={() => close(undefined)}\n            onCompletelyHidden={() => {\n                if (props.onCompletelyHidden) {\n                    props.onCompletelyHidden();\n                }\n            }}\n        >\n            {props.title && (\n                <div className={styles.modalTitle} id={`header_${dialogUniqId}`}>\n                    {props.title}\n                </div>\n            )}\n\n            <div className={styles.modalContent} id={`content_${dialogUniqId}`}>\n                <input\n                    type=\"text\"\n                    className={!isError ? styles.promtInput : styles.promtErrorInput}\n                    onChange={(e) => {\n                        setValue(e.target.value);\n                    }}\n                    defaultValue={value}\n                    name=\"promtDialog\"\n                    autoFocus={true}\n                />\n                <div className={styles.promtErrorText}>\n                    {(isError && props.errorText) ?? 'Value input required'}\n                </div>\n            </div>\n\n            <div className={styles.modalButtonPlace}>\n                <Button\n                    onClick={() => {\n                        if (props.isRequired && (!value || value.trim() === '')) {\n                            setError(true);\n                        } else {\n                            close(value);\n                        }\n                    }}\n                >\n                    {props.okButtonText || 'Ok'}\n                </Button>\n                <Button\n                    onClick={() => {\n                        close(undefined);\n                    }}\n                    type={ButtonType.LIGHT}\n                >\n                    {props.cancelButtonText || 'Cancel'}\n                </Button>\n            </div>\n        </Modal>\n    );\n}\n","import { ConfirmDialog, ConfirmDialogResult } from '../Modal/Confirm';\n\nimport { AlertDialog } from '../Modal/Alert';\nimport Dialog from '../Modal/Dialog';\nimport DialogContextProvider from '../../context/DialogContextProvider';\nimport { DialogElement } from '../../utils/types';\nimport { PromptDialog } from '../Modal/Prompt';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { appendToBody } from '../../utils/helpers';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction showModal<T>(Dialog: DialogElement<T>, dialogProps?: any): Promise<T> {\n    const rootElement = appendToBody('stfDialogPlace');\n    const dialogPlace = document.createElement('div');\n    dialogPlace.classList.add('stf__modalDialogsPlace');\n\n    rootElement.appendChild(dialogPlace);\n\n    return new Promise<T>((resolve) => {\n        const activeElement = document.activeElement as HTMLElement;\n\n        const dialogClose = (result: T) => {\n            resolve(result);\n\n            if (activeElement) {\n                if (rootElement.childNodes.length === 1) {\n                    activeElement.focus();\n                }\n            }\n        };\n\n        const dialogHidden = () => {\n            ReactDOM.render(undefined, dialogPlace);\n            dialogPlace.remove();\n        };\n\n        ReactDOM.render(\n            <DialogContextProvider>\n                <Dialog {...dialogProps} onClose={dialogClose} onCompletelyHidden={dialogHidden} />\n            </DialogContextProvider>,\n            dialogPlace\n        );\n    });\n}\n\nexport function Alert(\n    body: string | JSX.Element,\n    title?: string,\n    buttonText?: string\n): Promise<void> {\n    return showModal<void>(AlertDialog, {\n        body,\n        title,\n        buttonText,\n    });\n}\n\nexport interface PromptConfig {\n    defaultValue?: string | number;\n    isRequired?: boolean;\n    okButtonText?: string;\n    errorText?: string;\n    cancelButtonText?: string;\n}\n\nexport function Prompt(title?: string, options?: PromptConfig): Promise<string> {\n    return showModal<string>(PromptDialog, {\n        title,\n        ...options,\n    });\n}\n\nexport async function Confirm(\n    body: string | JSX.Element,\n    title?: string,\n    okButtonText?: string,\n    cancelButtonText?: string\n): Promise<boolean> {\n    return (\n        (await showModal<string>(ConfirmDialog, {\n            body,\n            title,\n            okButtonText,\n            cancelButtonText,\n        })) === ConfirmDialogResult.OK\n    );\n}\n\nexport interface CustomConfig {\n    title?: string;\n\n    className?: string;\n    defaultBodyOverflow?: string;\n    isFocusLock?: boolean;\n\n    showCloseIcon?: boolean;\n    isCanClose?: boolean;\n    isBodyScrollLocked?: boolean;\n\n    replaceScrollBar?: boolean;\n    scrollBarPlaceholderColor?: string;\n\n    onAfterOpen?: () => void;\n}\n\nexport async function CustomDialog<T>(\n    body: JSX.Element,\n    options?: CustomConfig\n): Promise<T | undefined> {\n    return showModal<T>(Dialog, {\n        ...options,\n        children: body,\n        isOpen: true,\n    });\n}\n","import React, { ReactNode } from 'react';\n\nimport styles from './Content.module.scss';\n\nexport type ContentProps = {\n    children?: ReactNode;\n    className?: string;\n};\n\nexport default function Content(props: ContentProps): JSX.Element {\n    return <div className={[props.className, styles.content].join(' ')}>{props.children}</div>;\n}\n","import React, { ReactNode } from 'react';\n\nimport styles from './Footer.module.scss';\n\nexport type FooterProps = {\n    children?: ReactNode;\n    className?: string;\n};\n\nexport default function Footer(props: FooterProps): JSX.Element {\n    return <div className={[props.className, styles.footer].join(' ')}>{props.children}</div>;\n}\n","import React, { useEffect, useRef } from 'react';\n\nimport Dialog from '../Modal/Dialog';\nimport DialogContextProvider from '../../context/DialogContextProvider';\nimport ReactDOM from 'react-dom';\nimport { appendToBody } from '../../utils/helpers';\n\nexport interface StaticDialogProps<T> {\n    children: React.ReactNode;\n\n    title?: string;\n    className?: string;\n    defaultBodyOverflow?: string;\n\n    showCloseIcon?: boolean;\n    isCanClose?: boolean;\n    isBodyScrollLocked?: boolean;\n    isFocusLock?: boolean;\n\n    replaceScrollBar?: boolean;\n    scrollBarPlaceholderColor?: string;\n\n    onAfterClose?: (result?: T) => void;\n    onAfterOpen?: () => void;\n\n    isOpen: boolean;\n}\n\nexport default function StaticDialog<T>(props: StaticDialogProps<T>): JSX.Element {\n    const activeElement = useRef<HTMLElement>();\n\n    useEffect(() => {\n        if (props.isOpen) {\n            activeElement.current = document.activeElement as HTMLElement;\n        } else if (activeElement.current) {\n            activeElement.current.focus();\n            activeElement.current = null;\n        }\n    }, [props.isOpen]);\n\n    return ReactDOM.createPortal(\n        <DialogContextProvider>\n            <Dialog {...props} isStatic={true} />\n        </DialogContextProvider>,\n        appendToBody('stfMountedDialogPlace')\n    );\n}\n","import { DialogContext, DialogContextType } from '../context/DialogContextProvider';\nimport { useCallback, useContext } from 'react';\n\nexport interface DialogState<T> {\n    isOpen: boolean;\n    close: (result?: T) => void;\n}\n\nexport default function useDialog<T>(): DialogState<T> {\n    const { dialogState, setDialogState } = useContext<DialogContextType>(DialogContext);\n\n    const close = useCallback(\n        (result?: T) => {\n            setDialogState({\n                isOpen: false,\n                isForce: true,\n                result: result,\n            });\n        },\n        [setDialogState]\n    );\n\n    return {\n        isOpen: dialogState.isOpen,\n        close: close,\n    };\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","LoadingIcon","React","viewBox","width","height","fill","fillRule","d","Button","forwardRef","props","autoFocus","onClick","formRole","disabled","state","className","styles","buttonPending","join","children","displayName","FocusLock","rootNode","useRef","focusableItems","isLocked","useEffect","updateFocusableItems","current","querySelectorAll","observer","MutationObserver","observe","childList","disconnect","isOpen","length","firstFocusItem","closedButtonEl","querySelector","forEach","item","focus","handleKeyPress","event","key","shiftKey","0","firstItem","[object Object]","lastItem","preventDefault","activeElement","window","addEventListener","removeEventListener","appendToBody","id","result","getElementById","setAttribute","body","Modal","isBodyScrollLocked","setOpen","useState","isCompletelyClose","setCompletelyClose","isOpenRef","isOverlayClick","overlayElement","handleEsc","useCallback","onAttemptClose","replaceScrollBar","borderRight","innerWidth","documentElement","clientWidth","scrollBarPlaceholderColor","overflow","defaultBodyOverflow","isFocusLock","overlay","overlayHidden","isStatic","staticDialog","onMouseDown","e","target","onMouseUp","role","labelledby","describedby","onTransitionEnd","onCompletelyVisible","onCompletelyHidden","modal","modalHidden","ConfirmDialog","dialogUniqId","Math","random","toString","close","onClose","alert","title","modalTitle","modalContent","modalButtonPlace","okButtonText","cancelButtonText","AlertDialog","buttonText","DialogContext","createContext","dialogState","undefined","isForce","setDialogState","DialogContextProvider","Provider","value","Dialog","onAfterClose","isCanClose","useContext","onAfterOpen","dialog","showCloseIcon","modalCloseIcon","CloseIcon","modalBody","PromptDialog","isError","setError","defaultValue","String","setValue","isRequired","trim","promtErrorInput","promtInput","onChange","name","promtErrorText","errorText","showModal","dialogProps","rootElement","dialogPlace","classList","add","Promise","resolve","ReactDOM","render","childNodes","remove","Alert","Prompt","options","Confirm","CustomDialog","Content","content","Footer","footer","StaticDialog","createPortal","useDialog"],"mappings":"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"}