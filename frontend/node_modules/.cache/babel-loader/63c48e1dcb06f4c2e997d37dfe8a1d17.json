{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { Component } from 'react';\nimport './styles/player.css';\nimport { io } from 'socket.io-client';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.io = io(\"http://localhost:8000/\");\n    this.video = /*#__PURE__*/React.createRef();\n    io.on('start', () => {\n      this.startStream();\n    });\n  }\n\n  getUserMedia() {\n    if (this.state.initiate) {\n      return navigator.mediaDevices.getUserMedia({\n        video: {\n          mediaSource: \"screen\",\n          width: {\n            max: '1920'\n          },\n          height: {\n            max: '1080'\n          },\n          frameRate: {\n            max: '30'\n          }\n        }\n      });\n    }\n  }\n\n  handleClient(stream) {\n    const call = this.peer.call(this.props.match.params.id, stream);\n    this.video.current.srcObject = stream;\n    this.video.current.play();\n  }\n\n  handleServer(stream) {\n    this.peer.on('call', call => {\n      call.answer(stream);\n      this.video.current.srcObject = stream;\n      this.video.current.play();\n    }, err => {\n      console.log('failed to answer!');\n    });\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    fetch('http://localhost:8000/isStarter', {\n      body: JSON.stringify({\n        id: id\n      })\n    }).then(res => res.json()).then(({\n      initiate\n    }) => {\n      if (initiate) {\n        this.peer = new Peer(id);\n        this.getUserMedia().then(this.handleServer);\n      } else {\n        this.peer = new Peer();\n        this.getUserMedia().then(this.handleClient);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.peer.disconnect();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Salam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"live.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.video,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","Component","io","Peer","Player","constructor","props","video","createRef","on","startStream","getUserMedia","state","initiate","navigator","mediaDevices","mediaSource","width","max","height","frameRate","handleClient","stream","call","peer","match","params","id","current","srcObject","play","handleServer","answer","err","console","log","componentDidMount","fetch","body","JSON","stringify","then","res","json","componentWillUnmount","disconnect","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './styles/player.css';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.io = io(\"http://localhost:8000/\");\r\n        this.video = React.createRef();\r\n\r\n        io.on('start', () => {\r\n            this.startStream();\r\n        });\r\n    }\r\n\r\n    getUserMedia() {\r\n        if(this.state.initiate){\r\n            return navigator.mediaDevices.getUserMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n                }\r\n              });\r\n        }\r\n    }\r\n\r\n    handleClient(stream){\r\n        const call = this.peer.call(this.props.match.params.id, stream);\r\n        this.video.current.srcObject = stream;\r\n        this.video.current.play();\r\n    } \r\n\r\n    handleServer(stream){\r\n        this.peer.on('call', call => {\r\n            call.answer(stream);\r\n            this.video.current.srcObject = stream;\r\n            this.video.current.play();\r\n        }, err => {\r\n            console.log('failed to answer!');\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        fetch('http://localhost:8000/isStarter', {\r\n            body: JSON.stringify({id: id})\r\n        })\r\n        .then(res => res.json())\r\n        .then(({initiate}) => {\r\n            if(initiate){\r\n                this.peer = new Peer(id);\r\n                this.getUserMedia().then(this.handleServer);\r\n            }else {\r\n                this.peer = new Peer();\r\n                this.getUserMedia().then(this.handleClient);\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.peer.disconnect();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"player\">\r\n                <div class=\"title\"><h3>Salam</h3> <img src=\"live.png\"/></div>\r\n                <video ref={this.video} autoPlay/>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}