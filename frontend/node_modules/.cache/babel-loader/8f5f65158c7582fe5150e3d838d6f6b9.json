{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { Component } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.video = /*#__PURE__*/React.createRef();\n    this.io = useSelector(state => state.socket.value);\n    this.state = {\n      initiate: new URLSearchParams(this.props.location.search).get('streamer')\n    };\n    this.dispatch = useDispatch();\n    this.handleClient = this.handleClient.bind(this);\n    this.handleServer = this.handleServer.bind(this);\n  }\n\n  getUserMedia() {\n    return navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: \"screen\",\n        width: {\n          max: '1920'\n        },\n        height: {\n          max: '1080'\n        },\n        frameRate: {\n          max: '30'\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.io.emit('join', this.peer.id);\n\n    if (this.state.initiate) {\n      this.peer = new Peer(id);\n      this.peer.on('call', call => {\n        this.getUserMedia().then(stream => {\n          this.video.current.srcObject = stream;\n          this.video.current.play();\n          call.answer(stream);\n        });\n      });\n    } else {\n      this.peer = new Peer().connect(id);\n    }\n\n    this.io.on('user-connected', ({\n      initiate,\n      peerid\n    }) => {\n      if (!initiate) {\n        let call = this.peer.call(id);\n        call.on('stream', stream => {\n          this.video.current.srcObject = stream;\n          this.video.current.play();\n        });\n      }\n\n      console.log(`User with id ${peerid} connected!`);\n    });\n  }\n\n  componentWillUnmount() {\n    this.dispatch(disconnect());\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Salam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"live\",\n          src: \"live.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.video,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","Component","Peer","useSelector","useDispatch","disconnect","Player","constructor","props","video","createRef","io","state","socket","value","initiate","URLSearchParams","location","search","get","dispatch","handleClient","bind","handleServer","getUserMedia","navigator","mediaDevices","getDisplayMedia","mediaSource","width","max","height","frameRate","componentDidMount","id","match","params","emit","peer","on","call","then","stream","current","srcObject","play","answer","connect","peerid","console","log","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.video = React.createRef();\r\n        this.io = useSelector((state) => state.socket.value)\r\n        this.state = { initiate: new URLSearchParams(this.props.location.search).get('streamer')};\r\n        this.dispatch = useDispatch();\r\n        \r\n        this.handleClient = this.handleClient.bind(this);\r\n        this.handleServer = this.handleServer.bind(this);\r\n    }\r\n\r\n    getUserMedia() {\r\n        return navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.io.emit('join', this.peer.id);\r\n\r\n        if (this.state.initiate){\r\n            this.peer = new Peer(id);\r\n            this.peer.on('call', call => {\r\n                this.getUserMedia().then(stream => {\r\n                    this.video.current.srcObject = stream;\r\n                    this.video.current.play();\r\n                    call.answer(stream);\r\n                })\r\n            })\r\n        } else {\r\n            this.peer = new Peer().connect(id);\r\n        }\r\n        this.io.on('user-connected', ({initiate, peerid}) => {\r\n            if (!initiate){\r\n                let call = this.peer.call(id);\r\n                call.on('stream', stream => {\r\n                    this.video.current.srcObject = stream;\r\n                    this.video.current.play();\r\n                })\r\n            }\r\n            console.log(`User with id ${peerid} connected!`);\r\n        });\r\n            \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.dispatch(disconnect());\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"player\">\r\n                <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n                    <video ref={this.video} autoPlay/>      \r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}