{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { Component } from 'react';\nimport './styles/player.css';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.video = /*#__PURE__*/React.createRef();\n    this.io = io.connect('http://127.0.0.1:8000');\n    this.state = {\n      initiate: new URLSearchParams(this.props.location.search).get('streamer')\n    };\n    this.handleClient = this.handleClient.bind(this);\n    this.handleServer = this.handleServer.bind(this);\n  }\n\n  getUserMedia() {\n    return navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: \"screen\",\n        width: {\n          max: '1920'\n        },\n        height: {\n          max: '1080'\n        },\n        frameRate: {\n          max: '30'\n        }\n      }\n    });\n  }\n\n  handleClient(socket) {\n    this.io.on('start', stream => {});\n  }\n\n  handleServer(stream) {\n    this.video.current.srcObject = stream;\n    this.video.current.play();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.io.emit('join', id);\n\n    if (this.state.initiate) {\n      this.getUserMedia().then(this.handleServer);\n    } else {\n      this.handleClient();\n    } // .then(res => res.json())\n    // .then(({initiate}) => {\n    //     console.log(initiate)\n    //     if(initiate){\n    //         this.getUserMedia().then(this.handleServer);\n    //    }else {\n    //         this.handleClient();\n    //     }\n    //  })\n\n  }\n\n  componentWillUnmount() {\n    this.io.disconnect();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Salam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"live\",\n          src: \"live.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.video,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","Component","io","Player","constructor","props","video","createRef","connect","state","initiate","URLSearchParams","location","search","get","handleClient","bind","handleServer","getUserMedia","navigator","mediaDevices","getDisplayMedia","mediaSource","width","max","height","frameRate","socket","on","stream","current","srcObject","play","componentDidMount","id","match","params","emit","then","componentWillUnmount","disconnect","render","canvas"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,qBAAP;AACA,SAAQC,EAAR,QAAiB,kBAAjB;;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAC1CG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,gBAAaN,KAAK,CAACO,SAAN,EAAb;AACA,SAAKL,EAAL,GAAUA,EAAE,CAACM,OAAH,CAAW,uBAAX,CAAV;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,IAAIC,eAAJ,CAAoB,KAAKN,KAAL,CAAWO,QAAX,CAAoBC,MAAxC,EAAgDC,GAAhD,CAAoD,UAApD;AAAZ,KAAb;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDE,EAAAA,YAAY,GAAG;AACX,WAAOC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC;AACtCf,MAAAA,KAAK,EAAE;AACLgB,QAAAA,WAAW,EAAE,QADR;AAELC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAFF;AAGLC,QAAAA,MAAM,EAAE;AAAED,UAAAA,GAAG,EAAE;AAAP,SAHH;AAILE,QAAAA,SAAS,EAAE;AAAEF,UAAAA,GAAG,EAAE;AAAP;AAJN;AAD+B,KAAvC,CAAP;AAQH;;AAEDT,EAAAA,YAAY,CAACY,MAAD,EAAQ;AAChB,SAAKzB,EAAL,CAAQ0B,EAAR,CAAW,OAAX,EAAoBC,MAAM,IAAI,CAE7B,CAFD;AAGH;;AAEDZ,EAAAA,YAAY,CAACY,MAAD,EAAQ;AAChB,SAAKvB,KAAL,CAAWwB,OAAX,CAAmBC,SAAnB,GAA+BF,MAA/B;AACA,SAAKvB,KAAL,CAAWwB,OAAX,CAAmBE,IAAnB;AAEH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,EAAE,GAAG,KAAK7B,KAAL,CAAW8B,KAAX,CAAiBC,MAAjB,CAAwBF,EAAnC;AACA,SAAKhC,EAAL,CAAQmC,IAAR,CAAa,MAAb,EAAqBH,EAArB;;AACA,QAAG,KAAKzB,KAAL,CAAWC,QAAd,EAAuB;AACnB,WAAKQ,YAAL,GAAoBoB,IAApB,CAAyB,KAAKrB,YAA9B;AACH,KAFD,MAEO;AACH,WAAKF,YAAL;AACH,KAPe,CASjB;AACA;AACA;AACA;AACA;AACC;AACD;AACA;AACD;;AACD;;AAEDwB,EAAAA,oBAAoB,GAAG;AACnB,SAAKrC,EAAL,CAAQsC,UAAR;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA,8BACI;AAAK,QAAA,KAAK,EAAC,OAAX;AAAA,gCAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB,oBAAkC;AAAK,UAAA,EAAE,EAAC,MAAR;AAAe,UAAA,GAAG,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ;AAAO,QAAA,GAAG,EAAE,KAAKnC,KAAjB;AAAwB,QAAA,QAAQ;AAAhC;AAAA;AAAA;AAAA;AAAA,cAFR,eAGQ;AAAQ,QAAA,GAAG,EAAE,KAAKoC;AAAlB;AAAA;AAAA;AAAA;AAAA,cAHR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAlEyC","sourcesContent":["import React, {Component} from 'react';\r\nimport './styles/player.css';\r\nimport {io} from 'socket.io-client';\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.video = React.createRef();\r\n        this.io = io.connect('http://127.0.0.1:8000');\r\n        this.state = { initiate: new URLSearchParams(this.props.location.search).get('streamer')};\r\n        \r\n        this.handleClient = this.handleClient.bind(this);\r\n        this.handleServer = this.handleServer.bind(this);\r\n    }\r\n\r\n    getUserMedia() {\r\n        return navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleClient(socket){\r\n        this.io.on('start', stream => {\r\n            \r\n        });\r\n    } \r\n\r\n    handleServer(stream){\r\n        this.video.current.srcObject = stream;\r\n        this.video.current.play();\r\n       \r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.io.emit('join', id);\r\n        if(this.state.initiate){\r\n            this.getUserMedia().then(this.handleServer);\r\n        } else {\r\n            this.handleClient();\r\n        }\r\n\r\n       // .then(res => res.json())\r\n       // .then(({initiate}) => {\r\n       //     console.log(initiate)\r\n       //     if(initiate){\r\n       //         this.getUserMedia().then(this.handleServer);\r\n        //    }else {\r\n       //         this.handleClient();\r\n       //     }\r\n      //  })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.io.disconnect();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"player\">\r\n                <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n                    <video ref={this.video} autoPlay/> \r\n                    <canvas ref={this.canvas}></canvas>        \r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}