{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getUserMedia() {\n  return navigator.mediaDevices.getDisplayMedia({\n    video: {\n      mediaSource: \"screen\",\n      width: {\n        max: '1920'\n      },\n      height: {\n        max: '1080'\n      },\n      frameRate: {\n        max: '30'\n      }\n    }\n  });\n}\n\nexport default function Player(props) {\n  _s();\n\n  const video = useRef(null);\n  const [io] = useState(useSelector(state => state.socket.value));\n  const [peer, setPeer] = useState(null);\n  const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const id = props.match.params.id;\n    io.emit('join', id);\n\n    if (initiate) {\n      setPeer(new Peer(id));\n      console.log(peer);\n      peer.on('call', call => {\n        getUserMedia().then(stream => {\n          video.current.srcObject = stream;\n          video.current.play();\n          call.answer(stream);\n        });\n      });\n    } else {\n      setPeer(new Peer().connect(id));\n    }\n\n    io.on('user-connected', ({\n      initiate,\n      peerid\n    }) => {\n      if (!initiate) {\n        let call = peer.call(id);\n        call.on('stream', stream => {\n          video.current.srcObject = stream;\n          video.current.play();\n        });\n      }\n\n      console.log(`User with id ${peerid} connected!`);\n    });\n    return () => {\n      dispatch(disconnect());\n    };\n  }, [props.match.params.id, io, initiate, peer, video, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \" \",\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: video,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"yI0z4vrkXdPug0jEF9fCdjnpVUI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","useRef","Peer","useSelector","useDispatch","disconnect","getUserMedia","navigator","mediaDevices","getDisplayMedia","video","mediaSource","width","max","height","frameRate","Player","props","io","state","socket","value","peer","setPeer","initiate","URLSearchParams","location","search","get","dispatch","id","match","params","emit","console","log","on","call","then","stream","current","srcObject","play","answer","connect","peerid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nfunction getUserMedia() {\r\n    return navigator.mediaDevices.getDisplayMedia({\r\n            video: {\r\n              mediaSource: \"screen\",\r\n              width: { max: '1920' },\r\n              height: { max: '1080' },\r\n              frameRate: { max: '30' }\r\n        }\r\n    });\r\n} \r\n\r\nexport default function Player(props) {\r\n        const video = useRef(null);\r\n        const [io] = useState(useSelector((state) => state.socket.value));\r\n        const [peer, setPeer] = useState(null);\r\n        const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'))\r\n        const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const id = props.match.params.id;\r\n        io.emit('join', id);\r\n\r\n        if (initiate){\r\n            setPeer(new Peer(id));\r\n            console.log(peer)\r\n            peer.on('call', call => {\r\n                getUserMedia().then(stream => {\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                    call.answer(stream);\r\n                })\r\n            })\r\n        } else {\r\n            setPeer(new Peer().connect(id));\r\n        }\r\n        io.on('user-connected', ({initiate, peerid}) => {\r\n            if (!initiate){\r\n                let call = peer.call(id);\r\n                call.on('stream', stream => {\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                })\r\n            }\r\n            console.log(`User with id ${peerid} connected!`);\r\n        });\r\n       \r\n        return () => {\r\n            dispatch(disconnect());\r\n        }\r\n    }, [props.match.params.id, io, initiate, peer, video, dispatch]);\r\n\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img alt=' ' id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={video} autoPlay/>      \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}