{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet peer = null;\nexport default function Player(props) {\n  _s();\n\n  const video = useRef(null);\n  const [io] = useState(useSelector(state => state.socket.value));\n  const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n  const name = useSelector(state => state.name.value);\n\n  function getUserMedia() {\n    return navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: \"screen\",\n        width: {\n          max: '1920'\n        },\n        height: {\n          max: '1080'\n        },\n        frameRate: {\n          max: '30'\n        }\n      }\n    });\n  }\n\n  function clearVid() {\n    video.current.removeAttribute('srcObject');\n    video.current.load();\n  }\n\n  function handleStreamer(id) {\n    peer = new Peer(id);\n    peer.on('open', () => {\n      io.emit('join', {\n        id: id,\n        peerid: id,\n        name: name\n      });\n      getUserMedia().then(stream => {\n        video.current.srcObject = stream;\n        video.current.play();\n        io.on('user-connected', ({\n          peerid\n        }) => {\n          peer.call(peerid, stream);\n        });\n\n        stream.oninactive = () => {\n          io.emit('disconnected', id);\n          clearVid();\n        };\n      });\n    });\n  }\n\n  function handleClient(id) {\n    peer = new Peer();\n    peer.connect(id);\n    peer.on('open', () => {\n      peer.on('call', call => {\n        console.log(peer._id);\n        call.answer(new MediaStream());\n        call.on('stream', stream => {\n          console.log(stream);\n          video.current.srcObject = stream;\n          video.current.play();\n        });\n      });\n      io.emit('join', {\n        id: id,\n        peerid: peer._id,\n        name: name\n      });\n    });\n    peer.on('error', err => {\n      console.log('error');\n      console.log(err);\n    });\n  }\n\n  useEffect(() => {\n    const id = props.match.params.id;\n\n    if (initiate) {\n      handleStreamer(id);\n    } else {\n      handleClient(id);\n    }\n\n    io.on('disconnected', () => {\n      clearVid();\n      console.log('disconnected');\n    });\n    console.log(`User with id ${peer._id} connected!`);\n    return () => {\n      dispatch(disconnect());\n    };\n  }, [props.match.params.id, io, initiate, video, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: video,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"l9sVqeAWhoLDjl5MQGYAuDUEub8=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","useRef","Peer","useSelector","useDispatch","disconnect","peer","Player","props","video","io","state","socket","value","initiate","URLSearchParams","location","search","get","dispatch","name","getUserMedia","navigator","mediaDevices","getDisplayMedia","mediaSource","width","max","height","frameRate","clearVid","current","removeAttribute","load","handleStreamer","id","on","emit","peerid","then","stream","srcObject","play","call","oninactive","handleClient","connect","console","log","_id","answer","MediaStream","err","match","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nlet peer = null;\r\n\r\nexport default function Player(props) {\r\n    const video = useRef(null);\r\n    const [io] = useState(useSelector((state) => state.socket.value));\r\n    const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\r\n    const dispatch = useDispatch();\r\n    const name = useSelector(state => state.name.value);\r\n\r\n    function getUserMedia() {\r\n        return navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n            }\r\n        });\r\n    } \r\n    \r\n    function clearVid() {\r\n        video.current.removeAttribute('srcObject');\r\n        video.current.load();\r\n    }\r\n\r\n    function handleStreamer(id) {\r\n        peer = new Peer(id);\r\n        peer.on('open', () => {\r\n            io.emit('join', {id: id, peerid: id, name: name})\r\n            getUserMedia().then(stream => {\r\n                video.current.srcObject = stream;\r\n                video.current.play();\r\n                io.on('user-connected', ({peerid}) => {\r\n                    peer.call(peerid, stream);\r\n                });\r\n                stream.oninactive = () => {\r\n                    io.emit('disconnected', id);\r\n                    clearVid();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    function handleClient(id) {\r\n        peer = new Peer();\r\n        peer.connect(id);\r\n        peer.on('open', () => {\r\n            peer.on('call', call => {\r\n                console.log(peer._id);\r\n                call.answer(new MediaStream());\r\n                call.on('stream', stream => {\r\n                    console.log(stream)\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                });\r\n            });\r\n            io.emit('join', {id: id, peerid: peer._id, name: name});\r\n        });\r\n        peer.on('error', err => {\r\n            console.log('error')\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const id = props.match.params.id;\r\n\r\n        if (initiate){\r\n            handleStreamer(id);\r\n        } else {\r\n            handleClient(id);\r\n        }\r\n\r\n        io.on('disconnected', () => {\r\n            clearVid();\r\n            console.log('disconnected')\r\n        });\r\n\r\n        console.log(`User with id ${peer._id} connected!`);\r\n       \r\n        return () => {\r\n            dispatch(disconnect());\r\n        };\r\n\r\n    }, [props.match.params.id, io, initiate, video, dispatch]);\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={video} autoPlay muted/>      \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}