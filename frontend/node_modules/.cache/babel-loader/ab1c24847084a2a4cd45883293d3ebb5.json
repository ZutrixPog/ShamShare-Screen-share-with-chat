{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getUserMedia() {\n  return navigator.mediaDevices.getDisplayMedia({\n    video: {\n      mediaSource: \"screen\",\n      width: {\n        max: '1920'\n      },\n      height: {\n        max: '1080'\n      },\n      frameRate: {\n        max: '30'\n      }\n    }\n  });\n}\n\nlet peer = null;\nexport default function Player(props) {\n  _s();\n\n  const video = useRef(null);\n  const [io] = useState(useSelector(state => state.socket.value));\n  const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n\n  function clearVid() {\n    video.current.removeAttribute('srcObject');\n    video.current.load();\n  }\n\n  useEffect(() => {\n    const id = props.match.params.id;\n\n    if (initiate) {\n      peer = new Peer(id);\n      peer.on('open', () => {\n        io.emit('join', {\n          id: id,\n          peerid: id\n        });\n        getUserMedia().then(stream => {\n          video.current.srcObject = stream;\n          video.current.play();\n          io.on('user-connected', ({\n            peerid\n          }) => {\n            peer.call(peerid, stream);\n          });\n\n          stream.oninactive = () => {\n            io.emit('disconnected', id);\n            clearVid();\n          };\n        });\n      });\n    } else {\n      peer = new Peer();\n      peer.connect(id);\n      console.log(peer);\n      peer.on('open', () => {\n        peer.on('call', call => {\n          console.log(peer._id);\n          call.answer(new MediaStream());\n          call.on('stream', stream => {\n            console.log(stream);\n            video.current.srcObject = stream;\n            video.current.play();\n          });\n        });\n        io.emit('join', {\n          id: id,\n          peerid: peer._id\n        });\n      });\n      peer.on('error', err => {\n        console.log('error');\n        console.log(err);\n      });\n    }\n\n    io.on('disconnected', () => {\n      clearVid();\n    });\n    console.log(`User with id ${id} connected!`);\n    return () => {\n      dispatch(disconnect());\n    };\n  }, [props.match.params.id, io, initiate, video, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: video,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"+6zIqcQ1u2qbJ15luRW7OyUulYw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","useRef","Peer","useSelector","useDispatch","disconnect","getUserMedia","navigator","mediaDevices","getDisplayMedia","video","mediaSource","width","max","height","frameRate","peer","Player","props","io","state","socket","value","initiate","URLSearchParams","location","search","get","dispatch","clearVid","current","removeAttribute","load","id","match","params","on","emit","peerid","then","stream","srcObject","play","call","oninactive","connect","console","log","_id","answer","MediaStream","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nfunction getUserMedia() {\r\n    return navigator.mediaDevices.getDisplayMedia({\r\n            video: {\r\n              mediaSource: \"screen\",\r\n              width: { max: '1920' },\r\n              height: { max: '1080' },\r\n              frameRate: { max: '30' }\r\n        }\r\n    });\r\n} \r\n\r\nlet peer = null;\r\n\r\nexport default function Player(props) {\r\n    const video = useRef(null);\r\n    const [io] = useState(useSelector((state) => state.socket.value));\r\n    const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'))\r\n    const dispatch = useDispatch();\r\n\r\n    function clearVid() {\r\n        video.current.removeAttribute('srcObject');\r\n        video.current.load();\r\n    }\r\n\r\n    useEffect(() => {\r\n        const id = props.match.params.id;\r\n\r\n        if (initiate){\r\n            peer = new Peer(id);\r\n            peer.on('open', () => {\r\n                io.emit('join', {id: id, peerid: id})\r\n                getUserMedia().then(stream => {\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                    io.on('user-connected', ({peerid}) => {\r\n                        peer.call(peerid, stream);\r\n                    });\r\n                    stream.oninactive = () => {\r\n                        io.emit('disconnected', id);\r\n                        clearVid();\r\n                    }\r\n                });\r\n            })\r\n        } else {\r\n            peer = new Peer();\r\n            peer.connect(id);\r\n            console.log(peer);\r\n            peer.on('open', () => {\r\n                peer.on('call', call => {\r\n                    console.log(peer._id);\r\n                    call.answer(new MediaStream());\r\n                    call.on('stream', stream => {\r\n                        console.log(stream)\r\n                        video.current.srcObject = stream;\r\n                        video.current.play();\r\n                    });\r\n                });\r\n                io.emit('join', {id: id, peerid: peer._id});\r\n            });\r\n            peer.on('error', err => {\r\n                console.log('error')\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n        io.on('disconnected', () => {\r\n            clearVid();\r\n        });\r\n\r\n        console.log(`User with id ${id} connected!`);\r\n       \r\n        return () => {\r\n            dispatch(disconnect());\r\n        };\r\n\r\n    }, [props.match.params.id, io, initiate, video, dispatch]);\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={video} autoPlay muted/>      \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}