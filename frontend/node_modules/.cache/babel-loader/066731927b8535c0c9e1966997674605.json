{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { Component } from 'react';\nimport './styles/player.css';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stunServerConfig = {\n  iceServers: [{\n    url: 'turn:13.250.13.83:3478?transport=udp',\n    username: \"YzYNCouZM1mhqhmseWk6\",\n    credential: \"YzYNCouZM1mhqhmseWk6\"\n  }]\n};\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    const socket = io(\"http://localhost:8000/\");\n    this.io = socket;\n    this.state = {\n      initiate: false\n    };\n    this.video = /*#__PURE__*/React.createRef();\n    socket.on('start', () => {\n      this.startStream();\n    });\n  }\n\n  handleMedia(stream) {\n    let peer;\n\n    if (this.state.initiate) {\n      peer = new Peer({\n        initiate: this.state.initiate,\n        stream: stream,\n        config: stunServerConfig\n      });\n    } else {\n      peer = new Peer({\n        config: stunServerConfig\n      });\n    }\n\n    peer.on('signal', data => {\n      this.io.emit('offer', JSON.stringify(data));\n    });\n    this.io.on('offer', data => {\n      peer.signal(JSON.parse(data));\n    });\n    peer.on('stream', stream => {\n      this.video.current.srcObject = stream;\n      this.video.current.play();\n    });\n  }\n\n  startStream() {\n    if (this.state.initiate) {\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          mediaSource: \"screen\",\n          width: {\n            max: '1920'\n          },\n          height: {\n            max: '1080'\n          },\n          frameRate: {\n            max: '10'\n          }\n        }\n      }).then(this.handleMedia).catch(err => {\n        throw err;\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      initiate: true\n    });\n    this.io.emit('start');\n  }\n\n  componentWillUnmount() {\n    this.io.emit('start');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Salam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"live.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        ref: this.video\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","Component","io","Peer","stunServerConfig","iceServers","url","username","credential","Player","constructor","props","socket","state","initiate","video","createRef","on","startStream","handleMedia","stream","peer","config","data","emit","JSON","stringify","signal","parse","current","srcObject","play","navigator","mediaDevices","getUserMedia","mediaSource","width","max","height","frameRate","then","catch","err","componentDidMount","setState","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './styles/player.css';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst stunServerConfig = {\r\n    iceServers: [{\r\n      url: 'turn:13.250.13.83:3478?transport=udp',\r\n      username: \"YzYNCouZM1mhqhmseWk6\",\r\n      credential: \"YzYNCouZM1mhqhmseWk6\"\r\n    }]\r\n};\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        const socket = io(\"http://localhost:8000/\");\r\n        this.io = socket;\r\n        this.state = {initiate: false};\r\n        this.video = React.createRef();\r\n\r\n        socket.on('start', () => {\r\n            this.startStream();\r\n        });\r\n    }\r\n\r\n    handleMedia(stream) {\r\n        let peer;\r\n        if(this.state.initiate){\r\n            peer = new Peer({initiate: this.state.initiate, stream: stream, config: stunServerConfig});\r\n        } else {\r\n            peer = new Peer({config: stunServerConfig});\r\n        }\r\n\r\n        peer.on('signal', data => {\r\n            this.io.emit('offer', JSON.stringify(data));\r\n        });\r\n\r\n        this.io.on('offer', data => {\r\n            peer.signal(JSON.parse(data));\r\n        });\r\n\r\n        peer.on('stream', stream => {\r\n            this.video.current.srcObject = stream;\r\n            this.video.current.play();\r\n        })\r\n    }\r\n\r\n    startStream() {\r\n        if(this.state.initiate){\r\n            navigator.mediaDevices.getUserMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '10' }\r\n                }\r\n              }).then(this.handleMedia)\r\n              .catch(err => {throw err});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({initiate: true});\r\n        this.io.emit('start');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.io.emit('start');\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"player\">\r\n                <div class=\"title\"><h3>Salam</h3> <img src=\"live.png\"/></div>\r\n                <video autoPlay ref={this.video}/>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}