{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getUserMedia() {\n  return navigator.mediaDevices.getDisplayMedia({\n    video: {\n      mediaSource: \"screen\",\n      width: {\n        max: '1920'\n      },\n      height: {\n        max: '1080'\n      },\n      frameRate: {\n        max: '30'\n      }\n    }\n  });\n}\n\nlet peer = null;\nexport default function Player(props) {\n  _s();\n\n  const video = useRef(null);\n  const [io] = useState(useSelector(state => state.socket.value));\n  const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const id = props.match.params.id;\n    console.log(initiate);\n\n    if (initiate) {\n      peer = new Peer(id);\n      io.emit('join', {\n        id: id,\n        peerid: id\n      });\n      getUserMedia().then(stream => {\n        video.current.srcObject = stream;\n        video.current.play();\n        peer.on('connection', () => {\n          io.on('user-connected', ({\n            peerid\n          }) => {\n            peer.call(peerid, stream);\n          });\n        });\n      });\n    } else {\n      peer = new Peer().connect(id);\n      setTimeout(() => {\n        peer.on('open', () => {\n          console.log('salam');\n          io.emit('join', {\n            id: id,\n            peerid: peer.id\n          });\n          peer.on('call', call => {\n            call.on('stream', remoteStream => {\n              video.current.srcObject = remoteStream;\n              video.current.play();\n            });\n          });\n        });\n      }, 1000);\n    }\n\n    console.log(`User with id ${id} connected!`);\n    return () => {\n      dispatch(disconnect());\n    };\n  }, [props.match.params.id, io, initiate, peer, video, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \" \",\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: video,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"+6zIqcQ1u2qbJ15luRW7OyUulYw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","useRef","Peer","useSelector","useDispatch","disconnect","getUserMedia","navigator","mediaDevices","getDisplayMedia","video","mediaSource","width","max","height","frameRate","peer","Player","props","io","state","socket","value","initiate","URLSearchParams","location","search","get","dispatch","id","match","params","console","log","emit","peerid","then","stream","current","srcObject","play","on","call","connect","setTimeout","remoteStream"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nfunction getUserMedia() {\r\n    return navigator.mediaDevices.getDisplayMedia({\r\n            video: {\r\n              mediaSource: \"screen\",\r\n              width: { max: '1920' },\r\n              height: { max: '1080' },\r\n              frameRate: { max: '30' }\r\n        }\r\n    });\r\n} \r\n\r\nlet peer = null;\r\n\r\nexport default function Player(props) {\r\n        const video = useRef(null);\r\n        const [io] = useState(useSelector((state) => state.socket.value));\r\n        const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'))\r\n        const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const id = props.match.params.id;\r\n        console.log(initiate)\r\n\r\n        if (initiate){\r\n            peer = new Peer(id);\r\n            io.emit('join', {id: id, peerid: id})\r\n            getUserMedia().then(stream => {\r\n                video.current.srcObject = stream;\r\n                video.current.play();\r\n                peer.on('connection', () => {\r\n                    io.on('user-connected', ({peerid}) => {\r\n                        peer.call(peerid, stream);\r\n                    });\r\n                });\r\n            })\r\n        } else {\r\n            peer = new Peer().connect(id);\r\n            setTimeout(() => {\r\n                peer.on('open', () => {\r\n                    console.log('salam')\r\n                    io.emit('join', {id: id, peerid: peer.id});\r\n                    peer.on('call', call => {\r\n                        call.on('stream', remoteStream => {\r\n                            video.current.srcObject = remoteStream;\r\n                            video.current.play();\r\n                        });\r\n                    });\r\n                });\r\n            }, 1000)\r\n        }\r\n\r\n        console.log(`User with id ${id} connected!`);\r\n       \r\n        return () => {\r\n            dispatch(disconnect());\r\n        };\r\n\r\n    }, [props.match.params.id, io, initiate, peer, video, dispatch]);\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img alt=' ' id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={video} autoPlay/>      \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}