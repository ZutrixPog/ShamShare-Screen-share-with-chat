{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet peer = null;\nexport default function Player(props) {\n  _s();\n\n  const video = useRef(null);\n  const [io] = useState(useSelector(state => state.socket.value));\n  const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n  const name = useSelector(state => state.name.value);\n\n  function clearVid() {\n    video.current.removeAttribute('srcObject');\n    video.current.load();\n  }\n\n  useEffect(() => {\n    const id = props.match.params.id;\n\n    if (initiate) {\n      peer = new Peer(id);\n      peer.on('open', () => {\n        io.emit('join', {\n          id: id,\n          peerid: id,\n          name: name\n        });\n        getUserMedia().then(stream => {\n          video.current.srcObject = stream;\n          video.current.play();\n          io.on('user-connected', ({\n            peerid\n          }) => {\n            peer.call(peerid, stream);\n          });\n\n          stream.oninactive = () => {\n            io.emit('disconnected', id);\n            clearVid();\n          };\n        });\n      });\n    } else {\n      peer = new Peer();\n      peer.connect(id);\n      peer.on('open', () => {\n        peer.on('call', call => {\n          call.answer(new MediaStream());\n          call.on('stream', stream => {\n            video.current.srcObject = stream;\n            video.current.play();\n          });\n        });\n        io.emit('join', {\n          id: id,\n          peerid: peer._id,\n          name: name\n        });\n      });\n      peer.on('error', err => {\n        console.log('error');\n        console.log(err);\n      });\n    }\n\n    io.on('disconnected', () => {\n      clearVid();\n      console.log('disconnected');\n    });\n    console.log(`User with id ${peer._id} connected!`);\n    return () => {\n      dispatch(disconnect());\n    };\n  }, [props.match.params.id, io, initiate, video, dispatch, name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: video,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Player, \"l9sVqeAWhoLDjl5MQGYAuDUEub8=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","useRef","Peer","useSelector","useDispatch","disconnect","peer","Player","props","video","io","state","socket","value","initiate","URLSearchParams","location","search","get","dispatch","name","clearVid","current","removeAttribute","load","id","match","params","on","emit","peerid","getUserMedia","then","stream","srcObject","play","call","oninactive","connect","answer","MediaStream","_id","err","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nlet peer = null;\r\n\r\nexport default function Player(props) {\r\n    const video = useRef(null);\r\n    const [io] = useState(useSelector((state) => state.socket.value));\r\n    const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\r\n    const dispatch = useDispatch();\r\n    const name = useSelector(state => state.name.value);\r\n    \r\n    function clearVid() {\r\n        video.current.removeAttribute('srcObject');\r\n        video.current.load();\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const id = props.match.params.id;\r\n\r\n        if (initiate){\r\n            peer = new Peer(id);\r\n            peer.on('open', () => {\r\n                io.emit('join', {id: id, peerid: id, name: name})\r\n                getUserMedia().then(stream => {\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                    io.on('user-connected', ({peerid}) => {\r\n                        peer.call(peerid, stream);\r\n                    });\r\n                    stream.oninactive = () => {\r\n                        io.emit('disconnected', id);\r\n                        clearVid();\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            peer = new Peer();\r\n            peer.connect(id);\r\n            peer.on('open', () => {\r\n                peer.on('call', call => {\r\n                    call.answer(new MediaStream());\r\n                    call.on('stream', stream => {\r\n                        video.current.srcObject = stream;\r\n                        video.current.play();\r\n                    });\r\n                });\r\n                io.emit('join', {id: id, peerid: peer._id, name: name});\r\n            });\r\n            peer.on('error', err => {\r\n                console.log('error')\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n        io.on('disconnected', () => {\r\n            clearVid();\r\n            console.log('disconnected')\r\n        });\r\n\r\n        console.log(`User with id ${peer._id} connected!`);\r\n       \r\n        return () => {\r\n            dispatch(disconnect());\r\n        };\r\n\r\n    }, [props.match.params.id, io, initiate, video, dispatch, name]);\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={video} autoPlay muted/>      \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}