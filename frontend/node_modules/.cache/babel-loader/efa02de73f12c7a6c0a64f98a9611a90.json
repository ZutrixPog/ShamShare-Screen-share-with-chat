{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { Component } from 'react';\nimport './styles/player.css';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.video = /*#__PURE__*/React.createRef();\n    this.canvas = /*#__PURE__*/React.createRef();\n    this.io = io.connect('http://127.0.0.1:8000');\n    this.state = {\n      initiate: new URLSearchParams(this.props.location.search).get('streamer')\n    };\n    this.handleClient = this.handleClient.bind(this);\n    this.handleServer = this.handleServer.bind(this);\n    this.canvas.current.width = 1080;\n    this.canvas.current.height = 1920;\n  }\n\n  getUserMedia() {\n    return navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: \"screen\",\n        width: {\n          max: '1920'\n        },\n        height: {\n          max: '1080'\n        },\n        frameRate: {\n          max: '30'\n        }\n      }\n    });\n  }\n\n  draw(video, context) {\n    context.drawImage(video, 0, 0, context.width, context.height);\n    this.io.emit('stream', {\n      stream: this.canvas.toDataURL('image/webp'),\n      id: this.props.match.params.id\n    });\n  }\n\n  handleClient(socket) {\n    this.io.on('start', stream => {\n      this.video.current.srcObject = stream;\n      this.video.current.play();\n    });\n  }\n\n  handleServer(stream) {\n    this.video.current.srcObject = stream;\n    const context = this.canvas.getContext('2d');\n    context.width = this.canvas.width;\n    context.height = this.canvas.height;\n    this.video.current.play();\n    setInterval(() => {\n      this.draw(this.video, context);\n    }, 0.1);\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.io.emit('join', id);\n\n    if (this.state.initiate) {\n      this.getUserMedia().then(this.handleServer);\n    } else {\n      this.handleClient();\n    } // .then(res => res.json())\n    // .then(({initiate}) => {\n    //     console.log(initiate)\n    //     if(initiate){\n    //         this.getUserMedia().then(this.handleServer);\n    //    }else {\n    //         this.handleClient();\n    //     }\n    //  })\n\n  }\n\n  componentWillUnmount() {\n    this.io.disconnect();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Salam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"live.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), this.state.initiate ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: this.video,\n          autoPlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 26\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 61\n        }, this), \" \"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"vid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","Component","io","Player","constructor","props","video","createRef","canvas","connect","state","initiate","URLSearchParams","location","search","get","handleClient","bind","handleServer","current","width","height","getUserMedia","navigator","mediaDevices","getDisplayMedia","mediaSource","max","frameRate","draw","context","drawImage","emit","stream","toDataURL","id","match","params","socket","on","srcObject","play","getContext","setInterval","componentDidMount","then","componentWillUnmount","disconnect","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './styles/player.css';\r\nimport {io} from 'socket.io-client';\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.video = React.createRef();\r\n        this.canvas = React.createRef();\r\n        this.io = io.connect('http://127.0.0.1:8000');\r\n        this.state = { initiate: new URLSearchParams(this.props.location.search).get('streamer')};\r\n        \r\n        this.handleClient = this.handleClient.bind(this);\r\n        this.handleServer = this.handleServer.bind(this);\r\n\r\n        this.canvas.current.width = 1080;\r\n        this.canvas.current.height = 1920;\r\n    }\r\n\r\n    getUserMedia() {\r\n        return navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n            }\r\n        });\r\n    }\r\n\r\n    draw(video,context){\r\n        context.drawImage(video,0,0,context.width,context.height);\r\n        this.io.emit('stream',{stream: this.canvas.toDataURL('image/webp'), id: this.props.match.params.id});\r\n    }\r\n\r\n    handleClient(socket){\r\n        this.io.on('start', stream => {\r\n            this.video.current.srcObject = stream;\r\n            this.video.current.play();\r\n        });\r\n    } \r\n\r\n    handleServer(stream){\r\n        this.video.current.srcObject = stream;\r\n        const context = this.canvas.getContext('2d');\r\n        context.width = this.canvas.width;\r\n        context.height = this.canvas.height;\r\n        this.video.current.play();\r\n        setInterval(() => {\r\n            this.draw(this.video, context);\r\n        },0.1);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const id = this.props.match.params.id;\r\n        this.io.emit('join', id);\r\n        if(this.state.initiate){\r\n            this.getUserMedia().then(this.handleServer);\r\n        } else {\r\n            this.handleClient();\r\n        }\r\n\r\n       // .then(res => res.json())\r\n       // .then(({initiate}) => {\r\n       //     console.log(initiate)\r\n       //     if(initiate){\r\n       //         this.getUserMedia().then(this.handleServer);\r\n        //    }else {\r\n       //         this.handleClient();\r\n       //     }\r\n      //  })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.io.disconnect();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div class=\"player\">\r\n                <div class=\"title\"><h3>Salam</h3> <img src=\"live.png\"/></div>\r\n                {this.state.initiate \r\n                    ? <> <video ref={this.video} autoPlay/> <canvas ref={this.canvas}></canvas> </>\r\n                    : <img id=\"vid\"/>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}