{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\10\\\\Documents\\\\Projects\\\\ScreenShare\\\\frontend\\\\screen-share\\\\src\\\\components\\\\player.js\";\nimport React, { useState, useEffect } from 'react';\nimport Peer from 'peerjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './styles/player.css';\nimport { disconnect } from '../redux/slicers/socketSlicer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getUserMedia() {\n  return navigator.mediaDevices.getDisplayMedia({\n    video: {\n      mediaSource: \"screen\",\n      width: {\n        max: '1920'\n      },\n      height: {\n        max: '1080'\n      },\n      frameRate: {\n        max: '30'\n      }\n    }\n  });\n}\n\nexport default function (props) {\n  const video = /*#__PURE__*/React.createRef();\n  const io = useSelector(state => state.socket.value);\n  const [initiate, setinitiate] = useState(new URLSearchParams(this.props.location.search).get('streamer'));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const id = this.props.match.params.id;\n    this.io.emit('join', this.peer.id);\n\n    if (this.state.initiate) {\n      this.peer = new Peer(id);\n      this.peer.on('call', call => {\n        this.getUserMedia().then(stream => {\n          this.video.current.srcObject = stream;\n          this.video.current.play();\n          call.answer(stream);\n        });\n      });\n    } else {\n      this.peer = new Peer().connect(id);\n    }\n\n    this.io.on('user-connected', ({\n      initiate,\n      peerid\n    }) => {\n      if (!initiate) {\n        let call = this.peer.call(id);\n        call.on('stream', stream => {\n          this.video.current.srcObject = stream;\n          this.video.current.play();\n        });\n      }\n\n      console.log(`User with id ${peerid} connected!`);\n    });\n    return () => {\n      this.dispatch(disconnect());\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Salam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"live\",\n        src: \"live.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: this.video,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/10/Documents/Projects/ScreenShare/frontend/screen-share/src/components/player.js"],"names":["React","useState","useEffect","Peer","useSelector","useDispatch","disconnect","getUserMedia","navigator","mediaDevices","getDisplayMedia","video","mediaSource","width","max","height","frameRate","props","createRef","io","state","socket","value","initiate","setinitiate","URLSearchParams","location","search","get","dispatch","id","match","params","emit","peer","on","call","then","stream","current","srcObject","play","answer","connect","peerid","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\n\r\nfunction getUserMedia() {\r\n    return navigator.mediaDevices.getDisplayMedia({\r\n            video: {\r\n              mediaSource: \"screen\",\r\n              width: { max: '1920' },\r\n              height: { max: '1080' },\r\n              frameRate: { max: '30' }\r\n        }\r\n    });\r\n} \r\n\r\nexport default function(props) {\r\n        const video = React.createRef();\r\n        const io = useSelector((state) => state.socket.value)\r\n        const [initiate, setinitiate] = useState(new URLSearchParams(this.props.location.search).get('streamer'))\r\n        const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const id = this.props.match.params.id;\r\n        this.io.emit('join', this.peer.id);\r\n\r\n        if (this.state.initiate){\r\n            this.peer = new Peer(id);\r\n            this.peer.on('call', call => {\r\n                this.getUserMedia().then(stream => {\r\n                    this.video.current.srcObject = stream;\r\n                    this.video.current.play();\r\n                    call.answer(stream);\r\n                })\r\n            })\r\n        } else {\r\n            this.peer = new Peer().connect(id);\r\n        }\r\n        this.io.on('user-connected', ({initiate, peerid}) => {\r\n            if (!initiate){\r\n                let call = this.peer.call(id);\r\n                call.on('stream', stream => {\r\n                    this.video.current.srcObject = stream;\r\n                    this.video.current.play();\r\n                })\r\n            }\r\n            console.log(`User with id ${peerid} connected!`);\r\n        });\r\n       \r\n        return () => {\r\n            this.dispatch(disconnect());\r\n        }\r\n    });\r\n\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src=\"live.png\"/></div>          \r\n            <video ref={this.video} autoPlay/>      \r\n        </div>\r\n        )\r\n    }"]},"metadata":{},"sourceType":"module"}