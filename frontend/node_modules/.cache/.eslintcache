[{"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\index.js":"1","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\store.js":"3","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\App.js":"4","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\player.js":"5","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\Home.js":"6","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\chat.js":"7","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\join.js":"8","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\redux\\slicers\\nameSlicer.js":"9","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\redux\\slicers\\socketSlicer.js":"10"},{"size":616,"mtime":1629129309908,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":276,"mtime":1629296580260,"results":"14","hashOfConfig":"12"},{"size":741,"mtime":1629310351922,"results":"15","hashOfConfig":"12"},{"size":3595,"mtime":1629478149298,"results":"16","hashOfConfig":"12"},{"size":1358,"mtime":1629312088796,"results":"17","hashOfConfig":"12"},{"size":1803,"mtime":1629477937195,"results":"18","hashOfConfig":"12"},{"size":661,"mtime":1629313048019,"results":"19","hashOfConfig":"12"},{"size":351,"mtime":1629296425052,"results":"20","hashOfConfig":"12"},{"size":540,"mtime":1629199142950,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ggcvw9",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\index.js",[],["44","45"],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\store.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\App.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\player.js",["46"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport Peer from 'peerjs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './styles/player.css';\r\nimport { disconnect } from '../redux/slicers/socketSlicer';\r\nimport liveLogo from '../live.png';\r\n\r\nlet peer = null;\r\n\r\nexport default function Player(props) {\r\n    const video = useRef(null);\r\n    const [io] = useState(useSelector((state) => state.socket.value));\r\n    const [initiate] = useState(new URLSearchParams(props.location.search).get('streamer'));\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const name = useSelector(state => state.name.value);\r\n    const id = props.match.params.id;\r\n\r\n    function getUserMedia() {\r\n        return navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                  mediaSource: \"screen\",\r\n                  width: { max: '1920' },\r\n                  height: { max: '1080' },\r\n                  frameRate: { max: '30' }\r\n            }\r\n        });\r\n    } \r\n    \r\n    function clearVid() {\r\n        setVisible(true);\r\n        video.current.removeAttribute('srcObject');\r\n        video.current.load();\r\n    }\r\n\r\n    // I know i could use functions here but for whatever reason it didnt work??\r\n    useEffect(() => {\r\n        if (initiate){\r\n            setVisible(true)\r\n            peer = new Peer(id);\r\n            peer.on('open', () => {\r\n                io.emit('join', {id: id, peerid: id, name: name})\r\n                getUserMedia().then(stream => {\r\n                    setVisible(false);\r\n                    video.current.srcObject = stream;\r\n                    video.current.play();\r\n                    peer.on('call', call => {\r\n                        console.log('called')\r\n                        call.answer(stream);\r\n                    });\r\n                    io.on('user-connected', ({peerid}) => {\r\n                        peer.call(peerid, stream);\r\n                    })\r\n                    stream.oninactive = () => {\r\n                        io.emit('disconnected', id);\r\n                        clearVid();\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            peer = new Peer();\r\n            peer.connect(id);\r\n            peer.on('open', () => {\r\n                peer.on('call', call => {\r\n                    call.answer(new MediaStream());\r\n                    call.on('stream', stream => {\r\n                        video.current.srcObject = stream;\r\n                        video.current.play();\r\n                    });\r\n                });\r\n                console.log(peer._id)\r\n                io.emit('join', {id: id, peerid: peer._id, name: name});\r\n            });\r\n            peer.on('error', err => {\r\n                console.log('error')\r\n                console.log(err);\r\n            });\r\n        }\r\n        \r\n        io.on('disconnected', () => {\r\n            clearVid();\r\n            console.log('disconnected')\r\n        });\r\n\r\n        return () => {\r\n            dispatch(disconnect());\r\n        };\r\n\r\n    }, [id, io, initiate, video, dispatch, name]);\r\n    \r\n    return (\r\n        <div class=\"player\">\r\n            <div class=\"title\"><h3>Salam</h3> <img id=\"live\" src={liveLogo}/></div>          \r\n            <video ref={video} autoPlay muted/> \r\n            <h2 id='inform' style={{opacity: visible ? 1 : 0}} >Please reload to Start Stream!</h2> \r\n            <div className='code'>Your Stream Code: {id} <button id=\"copy\" onClick={() => { navigator.clipboard.writeText(id) }}/></div>    \r\n        </div>\r\n    )\r\n}","C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\Home.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\chat.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\components\\join.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\redux\\slicers\\nameSlicer.js",[],"C:\\Users\\10\\Documents\\Projects\\ScreenShare\\frontend\\src\\redux\\slicers\\socketSlicer.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":93,"column":47,"nodeType":"53","endLine":93,"endColumn":78},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]